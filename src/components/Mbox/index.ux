<template>
  <div class="mbox" id="mbox">
    <div class="main {{mainClass}}" id="main" onclick="clickhandle">
      <text>{{nowName}}</text>
    </div>
    <div for="tab_list" class="box-item" id="box-item-{{$idx+1}}" onclick="changeTab($item)">
      <text>{{$item.name}}</text>
    </div>
  </div>

</template>

<style lang="less">
  @basel: 80px;
  @position-right: 10px;
  @position-bottom: 200px;
  @base-fontsize: 24px;
  @base-transform: 120px;

  .mbox {
    position: fixed;
    width: @basel+20px;
    height: @basel+20px;
    right: @position-right;
    bottom: @position-bottom;
    z-index: 1000;
    justify-content: center;
    align-items: center;

    text {
      font-size: @base-fontsize;
    }
  }

  .box-item {
    position: fixed;
    width: @basel;
    height: @basel;
    opacity: 0;
    right: @position-right+10px;
    bottom: @position-bottom+10px;
    z-index: 900;
    background-image: url('../../images/yuan2.png');
    background-size: contain;
    justify-content: center;
    margin-left: 10px;
    margin-top: 10px;
    text {
      font-weight: bold;
    }
  }

  .main {
    width: @basel;
    height: @basel;
    justify-content: center;
    background-image: url('../../images/yuan.png');
    background-size: contain;
    background-color: cover;
    text-align: center;

    text {
      color: #80bd01;
    }
  }

  .animation-main {
    animation-name: mainAnimation;
    animation-duration: 800ms;
    /* animation-iteration-count: infinite; */
  }

  @keyframes mainAnimation {
    0% {
      transform: scale(1, 1);
    }

    20% {
      transform: scale(0.8, 0.8);
    }

    40% {
      transform: scale(1.2, 1.2);
    }

    100% {
      transform: scale(1, 1);
    }
  }
</style>

<script>
  let time;
  let animation_arr = []
  let show_or_hide_keyframs = [  // 显示,隐藏keyframes
    {
      transform: {
        translateX: 0,
      },
      time: 0
    },
    {
      transform: {
        translateX: 200,
        opacity: 1
      },
      time: 100
    }
  ]
  let show_or_hide_options = {  // 影藏动画 配置
    duration: 200,
    easing: 'linear',
    fill: 'forwards'
  }
  let show_or_hide_animate

  export default {
    props: {
      isshow: {
        default: true,
      }
    },
    data: {
      tab_list: [
        {
          name: '全部',
          type: 'all'
        },
        {
          name: '精华',
          type: 'good'
        },
        {
          name: '分享',
          type: 'share'
        },
        {
          name: '问答',
          type: 'ask'
        },
        {
          name: '招聘',
          type: 'job'
        },
        {
          name: '测试',
          type: 'dev'
        },
      ],
      nowIndex: 0,
      nowName: '',
      mainClass: '',
      isOpen: false, // 是否打开
      isReady: false,  // 模板是否编译完成
    },
    onReady() {
      this.isReady = true // 监听dom是否准备完成
      console.log(this.isshow)
      this.$watch('isshow', 'runHideOrShowAnimation') // 监听按钮是否显示隐藏
      this.setName()
    },
    setName() {
      this.nowName = this.tab_list[this.nowIndex].name
    },
    clickhandle() {
      if (!this.isReady) return;
      clearTimeout(time);
      this.mainClass = '';
      time = setTimeout(() => {
        this.mainClass = 'animation-main'
        if (this.isOpen) {
          this.runCloseAnimation();
        } else {
          this.runOpenAnimation();
        }
      }, 0);
    },
    runOpenAnimation() {
      this.tab_list.forEach((item, index) => {
        let keyframes = [
          {
            transform: {
              translateY: 0
            },
            opacity: 0,
            time: 0
          },
          {
            transform: {
              translateY: -140 * (index + 1)
            },
            opacity: 1,
            time: 100
          }
        ];
        let options = {
          duration: 200,
          easing: 'linear',
          delay: 160,
          fill: 'forwards'
        }
        let node = this.$element(`box-item-${index + 1}`)
        animation_arr[index] = node.animate(keyframes, options);
        animation_arr[index].play()
      });
      this.isOpen = true;
    },
    runCloseAnimation() {
      try {
        animation_arr.forEach((item, index) => {
          if (!item.finished) {
            throw '动画还未结束'
          }
          item.reverse();
        })
        this.isOpen = false;
      } catch (err) {
        console.info(`${err}`)
      }
    },
    changeTab(tab) {
      this.$emit('changeType', tab)
      this.nowName = tab.name
      this.runCloseAnimation()
    },
    // 延迟函数
    timeout(ms) {
      return new Promise(resolve => setTimeout(resolve, ms))
    },
    // 组件展示隐藏,依赖于 isshow 变量
    async runHideOrShowAnimation() {
      if (!this.isReady) return;
      if (this.isOpen) {
        this.runCloseAnimation();
        await this.timeout(200)
      }
      if (!show_or_hide_animate) {
        show_or_hide_animate = this.$element(`mbox`).animate(show_or_hide_keyframs, show_or_hide_options)
      }
      if (this.isshow) {
        // show
        show_or_hide_animate.reverse()
      } else {
        // hide
        show_or_hide_animate.play()
      }
    }
  }
</script>